"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Download } from "lucide-react"

export default function ProjectStatusDownload() {
  const [isDownloaded, setIsDownloaded] = useState(false)

  const handleDownload = () => {
    const content = generateProjectStatusText()
    const blob = new Blob([content], { type: "text/plain;charset=utf-8" })
    const url = URL.createObjectURL(blob)
    const link = document.createElement("a")
    link.href = url
    link.download = "study-helper-project-status.txt"
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
    setIsDownloaded(true)
    setTimeout(() => setIsDownloaded(false), 3000)
  }

  return (
    <Button onClick={handleDownload} className="gap-2" variant={isDownloaded ? "outline" : "default"}>
      <Download className="h-4 w-4" />
      {isDownloaded ? "다운로드 완료" : "프로젝트 현황 다운로드"}
    </Button>
  )
}

function generateProjectStatusText(): string {
  return `# Study Helper 프로젝트 현황 보고서

## 1. 개발대상 기능요구정의서

### 기본 기능
- 사용자 인증 시스템 (회원가입, 로그인, 소셜 로그인)
- 문서 업로드 및 텍스트 추출 (PDF, TXT, DOCX 등)
- AI 기반 문제 생성 (객관식, 주관식)
- 학습 세션 관리 및 진행 상황 추적
- 틀린 문제, 관심 문제만 따로 풀기 기능
- 크로스워드 퍼즐 생성
- 마인드맵 시각화 기능
- 콘텐츠 요약 기능 (URL, 유튜브 영상 스크립트 포함)

### 관리자 기능
- 회원 통계 (가입자, 로그인 통계)
- 회원 정보 관리
- 메인 페이지 주요 정보 변경 (사용자 만족도, 월간 사용자 수, 합격률 등)
- 가격 정책 관리
- 이벤트 배너 관리
- 고객 후기 관리

### 결제 시스템
- 다양한 결제 수단 지원 (카드, 계좌이체, 휴대폰 결제)
- 계좌이체 시 은행 및 입금 계좌 정보 제공
- 가상계좌 발급 기능
- 결제 완료 알림 (이메일, 문자)

## 2. 개발된 기능

### 사용자 인터페이스
- 반응형 웹 디자인 구현
- 다크 모드 지원
- 메인 페이지, 소개 페이지, FAQ 페이지 등 기본 페이지 구현
- 프리미엄 디자인 요소 적용 (그림자, 애니메이션, 그라데이션 등)

### 문서 처리
- PDF 파일 업로드 및 텍스트 추출
- OCR 기능을 통한 이미지 기반 PDF 텍스트 추출
- 다양한 문서 형식 지원 (TXT, DOCX, HTML, RTF)

### 학습 기능
- 컨텐츠 기반 문제 자동 생성 (객관식, 주관식)
- 학습 세션 관리 및 저장
- 학습 진행 상황 추적
- 크로스워드 퍼즐 생성

### 결제 시스템
- 결제 페이지 UI 구현
- 다양한 결제 수단 UI 구현 (카드, 계좌이체, 휴대폰 결제)
- 결제 완료 페이지 구현

### 기타
- 문서화 페이지 구현
- 프로젝트 상태 다운로드 기능

## 3. 개발되었으나 테스트안된 영역

### 사용자 인증
- 소셜 로그인 기능 (Google, Naver, Kakao)
  - UI는 구현되었으나 실제 OAuth 연동 테스트 필요
  - 로그인 상태 관리 및 로그아웃 기능 테스트 필요

### 결제 시스템
- 결제 프로세스 전체 흐름 테스트 필요
- 계좌이체 시 은행 정보 및 계좌 정보 표시 기능 테스트 필요
- 결제 완료 알림 기능 테스트 필요

### 학습 기능
- 틀린 문제, 관심 문제만 따로 풀기 기능 테스트 필요
- 학습 계획 설정 및 진행 관리 기능 테스트 필요

## 4. 요구사항에는 있으나 개발 안된 부분 및 개발안된 이유

### 관리자 대시보드
- 회원 통계 (가입자, 로그인 통계) - 미구현
- 회원 정보 관리 - 미구현
- 메인 페이지 주요 정보 변경 기능 - 미구현
- 가격 정책 관리 - 미구현
- 이벤트 배너 관리 - 미구현
- 고객 후기 관리 - 미구현

**개발 안된 이유**: 
- 백엔드 API 연동이 필요한 기능으로, 현재 프로젝트는 주로 프론트엔드 중심으로 개발됨
- 실제 데이터베이스 연동 없이 LocalStorage 기반으로 구현되어 있어 관리자 기능 구현에 제한이 있음
- 사용자 인증 시스템이 완전히 구현되지 않아 관리자 권한 관리가 어려움

### 마인드맵 및 콘텐츠 요약 기능
- 업로드된 콘텐츠를 마인드맵으로 시각화하는 기능 - 미구현
- URL에서 콘텐츠 추출 기능 - 미구현
- 유튜브 영상 스크립트 추출 기능 - 미구현

**개발 안된 이유**:
- 마인드맵 시각화는 복잡한 알고리즘과 시각화 라이브러리 통합이 필요함
- 유튜브 API 연동 및 스크립트 추출은 API 키와 권한 설정이 필요함
- 텍스트 분석 및 요약 기능은 고급 NLP 기술이 필요하며, 클라이언트 측에서 구현하기 어려움

### 가상계좌 발급 및 결제 알림
- 가상계좌 발급 기능 - 미구현
- 결제 완료 알림 (이메일, 문자) - 미구현

**개발 안된 이유**:
- 실제 PG사(Payment Gateway) 연동이 필요한 기능
- 이메일 및 SMS 발송 서비스 연동이 필요함
- 백엔드 서버 구현이 필요한 기능

## 5. 추가 개발 예정 내용 및 방법

### 단기 개발 계획 (1-2주)

#### 사용자 인증 시스템 완성
- 실제 OAuth 연동을 통한 소셜 로그인 구현
  - NextAuth.js 라이브러리 활용
  - 각 소셜 플랫폼 개발자 계정 및 API 키 설정
- 로그인 상태 관리 및 로그아웃 기능 구현
  - 세션 관리 및 토큰 기반 인증 구현
  - 로그인 시 UI 변경 (로그인 버튼 → 로그아웃 버튼)

#### 틀린 문제, 관심 문제만 따로 풀기 기능
- 학습 세션에서 틀린 문제와 관심 문제 필터링 기능 구현
- 필터링된 문제만 연습할 수 있는 인터페이스 구현

#### UI 개선
- CSS 오류 수정 및 디자인 일관성 확보
- 폰트 크기 통일 및 반응형 디자인 개선
- 로딩 상태 및 오류 처리 개선

### 중기 개발 계획 (3-4주)

#### 관리자 대시보드 구현
- 관리자 인증 및 권한 관리 시스템 구현
- 회원 통계 및 관리 기능 구현
- 콘텐츠 및 가격 정책 관리 기능 구현
- 이벤트 배너 및 고객 후기 관리 기능 구현

#### 결제 시스템 개선
- 계좌이체 시 은행 정보 및 계좌 정보 표시 기능 구현
- 가상계좌 발급 기능 연동 (외부 PG사 API 활용)
- 결제 완료 알림 기능 구현 (이메일, SMS)

### 장기 개발 계획 (5-8주)

#### 마인드맵 및 콘텐츠 요약 기능
- 텍스트 분석 및 키워드 추출 알고리즘 구현
- 마인드맵 시각화 라이브러리 통합 (D3.js 또는 vis.js)
- URL 콘텐츠 추출 기능 구현
- 유튜브 API 연동 및 스크립트 추출 기능 구현

#### 백엔드 시스템 구축
- 서버 측 API 개발 (Node.js + Express 또는 Next.js API Routes)
- 데이터베이스 설계 및 구현 (MongoDB 또는 PostgreSQL)
- 사용자 데이터 및 학습 데이터 관리 시스템 구축
- 백업 및 복구 시스템 구현

#### 성능 최적화 및 보안 강화
- 코드 최적화 및 번들 크기 감소
- 캐싱 전략 구현
- 보안 취약점 검사 및 수정
- HTTPS 및 데이터 암호화 구현

## 6. 결론 및 제안

현재 Study Helper 프로젝트는 기본적인 학습 기능과 UI는 구현되었으나, 사용자 인증, 관리자 기능, 마인드맵 시각화 등 주요 기능이 아직 완전히 구현되지 않았습니다. 특히 백엔드 시스템과의 연동이 필요한 기능들은 추가 개발이 필요합니다.

프로젝트를 성공적으로 완료하기 위해 다음과 같은 제안을 드립니다:

1. 우선순위 설정: 사용자 인증 및 틀린 문제 연습 기능과 같은 핵심 기능을 우선적으로 개발
2. 백엔드 시스템 구축: 데이터 관리 및 API 서비스 구현을 위한 백엔드 시스템 구축
3. 단계적 배포: 완성된 기능부터 단계적으로 배포하여 사용자 피드백 수집
4. 테스트 강화: 자동화된 테스트를 통해 기능 안정성 확보

이러한 계획을 통해 Study Helper 프로젝트를 성공적으로 완료하고, 사용자에게 가치 있는 학습 도구를 제공할 수 있을 것입니다.

---

작성일: ${new Date().toLocaleDateString()}
`
}

